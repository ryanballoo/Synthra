import React, { useRef, useState, useEffect } from 'react';

const ProductScanner = ({ onProductScanned }) => {
  const [isScanning, setIsScanning] = useState(false);
  const [capturedImage, setCapturedImage] = useState(null);
  const [error, setError] = useState(null);
  const [isReady, setIsReady] = useState(false);
  const videoRef = useRef(null);
  const canvasRef = useRef(null);
  const overlayRef = useRef(null);

  // Start scanning automatically when component mounts
  useEffect(() => {
    console.log('ProductScanner mounted');
    const initializeCamera = async () => {
      try {
        await startScanning();
      } catch (err) {
        console.error('Failed to initialize camera:', err);
        setError('Failed to initialize camera');
      }
    };
    
    initializeCamera();
    return () => stopCamera();
  }, []);

  const stopCamera = () => {
    if (videoRef.current?.srcObject) {
      const tracks = videoRef.current.srcObject.getTracks();
      tracks.forEach(track => track.stop());
      videoRef.current.srcObject = null;
    }
    setIsScanning(false);
    setIsReady(false);
  };

  const startScanning = async () => {
    try {
      setError(null);
      console.log('Requesting camera access...');
      
      const constraints = { 
        video: { 
          width: { ideal: 1280 },
          height: { ideal: 720 }
        },
        audio: false
      };
      
      console.log('Using constraints:', constraints);
      const stream = await navigator.mediaDevices.getUserMedia(constraints);
      console.log('Got media stream:', stream);
      
      if (videoRef.current) {
        console.log('Setting video source...');
        videoRef.current.srcObject = stream;
        videoRef.current.onloadedmetadata = () => {
          console.log('Video metadata loaded');
          videoRef.current.play()
            .then(() => {
              console.log('Video playback started');
              setIsScanning(true);
              setIsReady(true);
            })
            .catch(e => {
              console.error('Video playback failed:', e);
              setError('Failed to start video playback');
            });
        };
      } else {
        console.error('Video reference not found');
        setError('Video element not initialized');
      }
    } catch (err) {
      console.error('Camera access error:', err);
      setError(`Unable to access camera: ${err.message}`);
    }
  };

  const handleVideoReady = () => {
    console.log('Video metadata loaded');
    if (overlayRef.current && videoRef.current) {
      overlayRef.current.width = videoRef.current.videoWidth;
      overlayRef.current.height = videoRef.current.videoHeight;
      drawOverlay();
    }
  };

  const drawOverlay = () => {
    if (!overlayRef.current) return;
    
    const ctx = overlayRef.current.getContext('2d');
    const width = overlayRef.current.width;
    const height = overlayRef.current.height;
    
    ctx.clearRect(0, 0, width, height);
    ctx.strokeStyle = '#00ff00';
    ctx.lineWidth = 2;
    
    const margin = 50;
    ctx.beginPath();
    ctx.rect(margin, margin, width - margin * 2, height - margin * 2);
    ctx.stroke();
    
    const cornerSize = 20;
    ctx.beginPath();
    ctx.moveTo(margin, margin + cornerSize);
    ctx.lineTo(margin, margin);
    ctx.lineTo(margin + cornerSize, margin);
    ctx.stroke();
  };

  const captureProduct = async () => {
    if (!videoRef.current || !canvasRef.current) return;

    const canvas = canvasRef.current;
    const video = videoRef.current;
    
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    
    const ctx = canvas.getContext('2d');
    ctx.drawImage(video, 0, 0);
    
    const imageData = canvas.toDataURL('image/jpeg');
    setCapturedImage(imageData);
    
    onProductScanned({
      name: "Scanned Product",
      image: imageData,
      features: ["Auto-detected Feature 1", "Auto-detected Feature 2"],
      category: "Scanned Category"
    });
  };

  return (
    <div className="relative">
      <div className="bg-white rounded-lg shadow-lg overflow-hidden">
        {/* Error display */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-t-lg">
            {error}
          </div>
        )}

        {/* Video container */}
        <div className="relative" style={{ minHeight: '400px', backgroundColor: '#000' }}>
          <video
            ref={videoRef}
            autoPlay
            playsInline
            muted
            onLoadedMetadata={handleVideoReady}
            style={{
              width: '100%',
              height: '100%',
              maxHeight: '70vh',
              objectFit: 'contain'
            }}
          />
          
          <canvas
            ref={overlayRef}
            className="absolute top-0 left-0 w-full h-full pointer-events-none"
            style={{
              width: '100%',
              height: '100%'
            }}
          />

          {/* Loading overlay */}
          {!isReady && (
            <div className="absolute inset-0 bg-black bg-opacity-75 flex items-center justify-center">
              <div className="text-white text-lg">
                Initializing camera...
              </div>
            </div>
          )}
        </div>

        {/* Controls */}
        <div className="p-4 bg-gray-50 border-t">
          <div className="flex justify-between">
            <button
              onClick={captureProduct}
              disabled={!isReady}
              className="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Capture Product
            </button>
          </div>
        </div>
      </div>

      {/* Hidden canvas for image processing */}
      <canvas ref={canvasRef} className="hidden" />
    </div>
  );
};

export default ProductScanner;
